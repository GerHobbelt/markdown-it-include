{"version":3,"file":"markdownItInclude.modern.js","sources":["../index.js"],"sourcesContent":["\n\nlet path = require('path'),\n    fs = require('fs');\n\nlet INCLUDE_RE = /\\!{3}\\s*include\\s*\\(\\s*(.+?)\\s*\\)\\s*\\!{3}/i;\n\nmodule.exports = function include_plugin(md, options) {\n  let root = '.',\n      includeRe = INCLUDE_RE,\n      throwError = true,\n      notFoundMessage = 'File \\'{{FILE}}\\' not found.',\n      circularMessage = 'Circular reference between \\'{{FILE}}\\' and \\'{{PARENT}}\\'.';\n\n  if (options) {\n    if (typeof options === 'string') {\n      root = options;\n    } else {\n      root = options.root || root;\n      includeRe = options.includeRe || includeRe;\n      throwError = options.throwError || throwError;\n      notFoundMessage = options.notFoundMessage || notFoundMessage;\n      circularMessage = options.circularMessage || circularMessage;\n    }\n  }\n\n  function _replaceIncludeByContent(src, rootdir, parentFilePath, filesProcessed) {\n    filesProcessed = filesProcessed ? filesProcessed.slice() : []; // making a copy\n    let cap, filePath, mdSrc, errorMessage;\n\n    // store parent file path to check circular references\n    if (parentFilePath) {\n      filesProcessed.push(parentFilePath);\n    }\n    while ((cap = includeRe.exec(src))) {\n      filePath = path.resolve(rootdir, cap[1].trim());\n\n      // check if child file exists or if there is a circular reference\n      if (!fs.existsSync(filePath)) {\n        // child file does not exist\n        errorMessage = notFoundMessage.replace('{{FILE}}', filePath);\n      } else if (filesProcessed.indexOf(filePath) !== -1) {\n        // reference would be circular\n        errorMessage = circularMessage.replace('{{FILE}}', filePath).replace('{{PARENT}}', parentFilePath);\n      }\n\n      // check if there were any errors\n      if (errorMessage) {\n        if (throwError) {\n          throw new Error(errorMessage);\n        }\n        mdSrc = `\\n\\n${errorMessage}\\n\\n`;\n      } else {\n        // get content of child file\n        mdSrc = fs.readFileSync(filePath, 'utf8');\n        // check if child file also has includes\n        mdSrc = _replaceIncludeByContent(mdSrc, path.dirname(filePath), filePath, filesProcessed);\n        // remove one trailing newline, if it exists: that way, the included content does NOT\n        // automatically terminate the paragraph it is in due to the writer of the included\n        // part having terminated the content with a newline.\n        // However, when that snippet writer terminated with TWO (or more) newlines, these, minus one,\n        // will be merged with the newline after the #include statement, resulting in a 2-NL paragraph\n        // termination.\n        let len = mdSrc.length;\n        if (mdSrc[len - 1] === '\\n') {\n          mdSrc = mdSrc.substring(0, len - 1);\n        }\n      }\n\n      // replace include by file content\n      src = src.slice(0, cap.index) + mdSrc + src.slice(cap.index + cap[0].length, src.length);\n    }\n    return src;\n  }\n\n  function _includeFileParts(state) {\n    state.src = _replaceIncludeByContent(state.src, root);\n  }\n\n  md.core.ruler.before('normalize', 'include', _includeFileParts);\n};\n"],"names":["path","require","fs","INCLUDE_RE","module","exports","include_plugin","md","options","root","includeRe","throwError","notFoundMessage","circularMessage","_replaceIncludeByContent","src","rootdir","parentFilePath","filesProcessed","slice","cap","filePath","mdSrc","errorMessage","push","exec","resolve","trim","existsSync","replace","indexOf","Error","readFileSync","dirname","len","length","substring","index","_includeFileParts","state","core","ruler","before"],"mappings":"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"}