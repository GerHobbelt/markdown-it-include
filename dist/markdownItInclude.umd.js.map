{"version":3,"file":"markdownItInclude.umd.js","sources":["../index.js"],"sourcesContent":["\nlet path = require('path'),\n    fs = require('fs');\n\nlet INCLUDE_RE = /\\!{3}\\s*include(.+?)\\!{3}/i;\nlet BRACES_RE = /\\((.+?)\\)/i;\n\nmodule.exports = function include_plugin(md, options) {\n  const defaultOptions = {\n    root: '.',\n    includeRe: INCLUDE_RE,\n    throwError: true,\n    bracesAreOptional: false,\n    notFoundMessage: 'File \\'{{FILE}}\\' not found.',\n    circularMessage: 'Circular reference between \\'{{FILE}}\\' and \\'{{PARENT}}\\'.'\n  };\n\n  if (typeof options === 'string') {\n    options = Object.assign({}, defaultOptions, { root: options });\n  } else {\n    options = Object.assign({}, defaultOptions, options);\n  }\n\n  function _replaceIncludeByContent(src, rootdir, parentFilePath, filesProcessed) {\n    filesProcessed = filesProcessed ? filesProcessed.slice() : []; // making a copy\n    let cap, filePath, mdSrc, errorMessage;\n\n    // store parent file path to check circular references\n    if (parentFilePath) {\n      filesProcessed.push(parentFilePath);\n    }\n    while ((cap = options.includeRe.exec(src))) {\n      let includePath = cap[1].trim();\n      let sansBracesMatch = BRACES_RE.exec(includePath);\n\n      if (!sansBracesMatch && !options.bracesAreOptional) {\n        errorMessage = `INCLUDE statement '${src.trim()}' MUST have '()' braces around the include path ('${includePath}')`;\n      } else if (sansBracesMatch) {\n        includePath = sansBracesMatch[1].trim();\n      } else {\n        // path SHOULD have been preceeded by at least ONE whitespace character!\n        if (!/^\\s/.test(cap[1])) {\n          errorMessage = `INCLUDE statement '${src.trim()}': when not using braces around the path ('${includePath}'), it MUST be preceeded by at least one whitespace character to separate the include keyword and the include path.`;\n        }\n      }\n\n      if (!errorMessage) {\n        filePath = path.resolve(rootdir, includePath);\n\n      // check if child file exists or if there is a circular reference\n        if (!fs.existsSync(filePath)) {\n        // child file does not exist\n          errorMessage = options.notFoundMessage.replace('{{FILE}}', filePath);\n        } else if (filesProcessed.indexOf(filePath) !== -1) {\n        // reference would be circular\n          errorMessage = options.circularMessage.replace('{{FILE}}', filePath).replace('{{PARENT}}', parentFilePath);\n        }\n      }\n\n      // check if there were any errors\n      if (errorMessage) {\n        if (options.throwError) {\n          throw new Error(errorMessage);\n        }\n        mdSrc = `\\n\\n# INCLUDE ERROR: ${errorMessage}\\n\\n`;\n      } else {\n        // get content of child file\n        mdSrc = fs.readFileSync(filePath, 'utf8');\n        // check if child file also has includes\n        mdSrc = _replaceIncludeByContent(mdSrc, path.dirname(filePath), filePath, filesProcessed);\n        // remove one trailing newline, if it exists: that way, the included content does NOT\n        // automatically terminate the paragraph it is in due to the writer of the included\n        // part having terminated the content with a newline.\n        // However, when that snippet writer terminated with TWO (or more) newlines, these, minus one,\n        // will be merged with the newline after the #include statement, resulting in a 2-NL paragraph\n        // termination.\n        let len = mdSrc.length;\n        if (mdSrc[len - 1] === '\\n') {\n          mdSrc = mdSrc.substring(0, len - 1);\n        }\n      }\n\n      // replace include by file content\n      src = src.slice(0, cap.index) + mdSrc + src.slice(cap.index + cap[0].length, src.length);\n    }\n    return src;\n  }\n\n  function _includeFileParts(state) {\n    state.src = _replaceIncludeByContent(state.src, options.root);\n  }\n\n  md.core.ruler.before('normalize', 'include', _includeFileParts);\n};\n"],"names":["path","require","fs","INCLUDE_RE","BRACES_RE","module","exports","include_plugin","md","options","defaultOptions","root","includeRe","throwError","bracesAreOptional","notFoundMessage","circularMessage","Object","assign","_replaceIncludeByContent","src","rootdir","parentFilePath","filesProcessed","slice","cap","filePath","mdSrc","errorMessage","push","exec","includePath","trim","sansBracesMatch","test","resolve","existsSync","replace","indexOf","Error","readFileSync","dirname","len","length","substring","index","_includeFileParts","state","core","ruler","before"],"mappings":"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"}